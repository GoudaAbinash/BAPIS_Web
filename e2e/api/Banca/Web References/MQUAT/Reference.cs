//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Banca.MQUAT {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://Insc.MQ.WebService.org/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RequestReplyOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunMQStringOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::Banca.Properties.Settings.Default.Banca_MQUAT_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RequestReplyCompletedEventHandler RequestReplyCompleted;
        
        /// <remarks/>
        public event RunMQStringCompletedEventHandler RunMQStringCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Insc.MQ.WebService.org/RequestReplyNick", RequestElementName="RequestReplyNick", RequestNamespace="http://Insc.MQ.WebService.org/", ResponseElementName="RequestReplyNickResponse", ResponseNamespace="http://Insc.MQ.WebService.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("RequestReplyNickResult")]
        public int RequestReply(ref MQParms MQParms, string channelDefinition, string inQueueName, string outQueueName, string queueManagerName, ref string messageId, string inMessage, ref string outMessage, int WaitInterval, ref string exMessage, ref int CompletionCode, ref int ReasonCode, ref string ReasonName) {
            object[] results = this.Invoke("RequestReply", new object[] {
                        MQParms,
                        channelDefinition,
                        inQueueName,
                        outQueueName,
                        queueManagerName,
                        messageId,
                        inMessage,
                        outMessage,
                        WaitInterval,
                        exMessage,
                        CompletionCode,
                        ReasonCode,
                        ReasonName});
            MQParms = ((MQParms)(results[1]));
            messageId = ((string)(results[2]));
            outMessage = ((string)(results[3]));
            exMessage = ((string)(results[4]));
            CompletionCode = ((int)(results[5]));
            ReasonCode = ((int)(results[6]));
            ReasonName = ((string)(results[7]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RequestReplyAsync(MQParms MQParms, string channelDefinition, string inQueueName, string outQueueName, string queueManagerName, string messageId, string inMessage, string outMessage, int WaitInterval, string exMessage, int CompletionCode, int ReasonCode, string ReasonName) {
            this.RequestReplyAsync(MQParms, channelDefinition, inQueueName, outQueueName, queueManagerName, messageId, inMessage, outMessage, WaitInterval, exMessage, CompletionCode, ReasonCode, ReasonName, null);
        }
        
        /// <remarks/>
        public void RequestReplyAsync(MQParms MQParms, string channelDefinition, string inQueueName, string outQueueName, string queueManagerName, string messageId, string inMessage, string outMessage, int WaitInterval, string exMessage, int CompletionCode, int ReasonCode, string ReasonName, object userState) {
            if ((this.RequestReplyOperationCompleted == null)) {
                this.RequestReplyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestReplyOperationCompleted);
            }
            this.InvokeAsync("RequestReply", new object[] {
                        MQParms,
                        channelDefinition,
                        inQueueName,
                        outQueueName,
                        queueManagerName,
                        messageId,
                        inMessage,
                        outMessage,
                        WaitInterval,
                        exMessage,
                        CompletionCode,
                        ReasonCode,
                        ReasonName}, this.RequestReplyOperationCompleted, userState);
        }
        
        private void OnRequestReplyOperationCompleted(object arg) {
            if ((this.RequestReplyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestReplyCompleted(this, new RequestReplyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Insc.MQ.WebService.org/RunMQString", RequestNamespace="http://Insc.MQ.WebService.org/", ResponseNamespace="http://Insc.MQ.WebService.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunMQString(string Inputstring) {
            object[] results = this.Invoke("RunMQString", new object[] {
                        Inputstring});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunMQStringAsync(string Inputstring) {
            this.RunMQStringAsync(Inputstring, null);
        }
        
        /// <remarks/>
        public void RunMQStringAsync(string Inputstring, object userState) {
            if ((this.RunMQStringOperationCompleted == null)) {
                this.RunMQStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunMQStringOperationCompleted);
            }
            this.InvokeAsync("RunMQString", new object[] {
                        Inputstring}, this.RunMQStringOperationCompleted, userState);
        }
        
        private void OnRunMQStringOperationCompleted(object arg) {
            if ((this.RunMQStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunMQStringCompleted(this, new RunMQStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Insc.MQ.WebService.org/")]
    public partial class MQParms {
        
        private string messageIdField;
        
        private string inMessageField;
        
        private string outMessageField;
        
        private int waitIntervalField;
        
        private string exMessageField;
        
        private int completionCodeField;
        
        private int reasonCodeField;
        
        private string reasonNameField;
        
        private string putDataDateField;
        
        private string objectNameField;
        
        private string logFilePathField;
        
        private int mQLogTypeField;
        
        private int mqMsg_PersistenceField;
        
        private int mqMsg_ExpiryField;
        
        private double responseTimeField;
        
        private int inputQueue_CurrentDepthField;
        
        private int outputQueue_CurrentDepthField;
        
        /// <remarks/>
        public string messageId {
            get {
                return this.messageIdField;
            }
            set {
                this.messageIdField = value;
            }
        }
        
        /// <remarks/>
        public string inMessage {
            get {
                return this.inMessageField;
            }
            set {
                this.inMessageField = value;
            }
        }
        
        /// <remarks/>
        public string outMessage {
            get {
                return this.outMessageField;
            }
            set {
                this.outMessageField = value;
            }
        }
        
        /// <remarks/>
        public int waitInterval {
            get {
                return this.waitIntervalField;
            }
            set {
                this.waitIntervalField = value;
            }
        }
        
        /// <remarks/>
        public string exMessage {
            get {
                return this.exMessageField;
            }
            set {
                this.exMessageField = value;
            }
        }
        
        /// <remarks/>
        public int CompletionCode {
            get {
                return this.completionCodeField;
            }
            set {
                this.completionCodeField = value;
            }
        }
        
        /// <remarks/>
        public int ReasonCode {
            get {
                return this.reasonCodeField;
            }
            set {
                this.reasonCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ReasonName {
            get {
                return this.reasonNameField;
            }
            set {
                this.reasonNameField = value;
            }
        }
        
        /// <remarks/>
        public string PutDataDate {
            get {
                return this.putDataDateField;
            }
            set {
                this.putDataDateField = value;
            }
        }
        
        /// <remarks/>
        public string ObjectName {
            get {
                return this.objectNameField;
            }
            set {
                this.objectNameField = value;
            }
        }
        
        /// <remarks/>
        public string LogFilePath {
            get {
                return this.logFilePathField;
            }
            set {
                this.logFilePathField = value;
            }
        }
        
        /// <remarks/>
        public int MQLogType {
            get {
                return this.mQLogTypeField;
            }
            set {
                this.mQLogTypeField = value;
            }
        }
        
        /// <remarks/>
        public int MqMsg_Persistence {
            get {
                return this.mqMsg_PersistenceField;
            }
            set {
                this.mqMsg_PersistenceField = value;
            }
        }
        
        /// <remarks/>
        public int MqMsg_Expiry {
            get {
                return this.mqMsg_ExpiryField;
            }
            set {
                this.mqMsg_ExpiryField = value;
            }
        }
        
        /// <remarks/>
        public double ResponseTime {
            get {
                return this.responseTimeField;
            }
            set {
                this.responseTimeField = value;
            }
        }
        
        /// <remarks/>
        public int InputQueue_CurrentDepth {
            get {
                return this.inputQueue_CurrentDepthField;
            }
            set {
                this.inputQueue_CurrentDepthField = value;
            }
        }
        
        /// <remarks/>
        public int OutputQueue_CurrentDepth {
            get {
                return this.outputQueue_CurrentDepthField;
            }
            set {
                this.outputQueue_CurrentDepthField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RequestReplyCompletedEventHandler(object sender, RequestReplyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestReplyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestReplyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public MQParms MQParms {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MQParms)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string messageId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string outMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string exMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public int CompletionCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public int ReasonCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string ReasonName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RunMQStringCompletedEventHandler(object sender, RunMQStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunMQStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunMQStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591